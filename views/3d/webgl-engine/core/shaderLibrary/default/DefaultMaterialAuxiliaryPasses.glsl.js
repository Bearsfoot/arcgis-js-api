// COPYRIGHT Â© 2020 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.15/esri/copyright.txt for details.

define(["require","exports","../../../../../../core/tsSupport/makeTemplateObjectHelper","../Slice.glsl","../Transform.glsl","../attributes/NormalAttribute.glsl","../attributes/TextureCoordinateAttribute.glsl","../attributes/VertexNormal.glsl","../output/OutputDepth.glsl","../output/OutputHighlight.glsl","../shading/VisualVariables.glsl","../util/AlphaDiscard.glsl","../../shaderModules/interfaces"],(function(o,e,r,n,t,i,l,a,s,d,u,v,c){var p,m,g,x,f,h,O,C,V,A,D,P;Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultMaterialAuxiliaryPasses=function(o,e){var T=o.vertex.code,b=o.fragment.code;1!==e.output&&3!==e.output||(o.include(t.Transform,{linearDepth:!0}),o.include(l.TextureCoordinateAttribute,e),o.include(u.VisualVariables,e),o.include(s.OutputDepth,e),o.include(n.Slice,e),o.vertex.uniforms.add("nearFar","vec2"),o.varyings.add("depth","float"),e.hasColorTexture&&o.fragment.uniforms.add("tex","sampler2D"),T.add(c.glsl(p||(p=r(["\n      void main(void) {\n        vpos = calculateVPos();\n        vpos = subtractOrigin(vpos);\n        vpos = addVerticalOffset(vpos, localOrigin);\n        gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);\n        forwardTextureCoordinates();\n      }\n    "],["\n      void main(void) {\n        vpos = calculateVPos();\n        vpos = subtractOrigin(vpos);\n        vpos = addVerticalOffset(vpos, localOrigin);\n        gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);\n        forwardTextureCoordinates();\n      }\n    "])))),o.include(v.DiscardOrAdjustAlpha,e),b.add(c.glsl(g||(g=r(["\n      void main(void) {\n        discardBySlice(vpos);\n        ","\n        outputDepth(depth);\n      }\n    "],["\n      void main(void) {\n        discardBySlice(vpos);\n        ","\n        outputDepth(depth);\n      }\n    "])),e.hasColorTexture?c.glsl(m||(m=r(["\n        vec4 texColor = texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"],["\n        vec4 texColor = texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"]))):""))),2===e.output&&(o.include(t.Transform,{linearDepth:!1}),o.include(i.NormalAttribute,e),o.include(a.VertexNormal,e),o.include(l.TextureCoordinateAttribute,e),o.include(u.VisualVariables,e),e.hasColorTexture&&o.fragment.uniforms.add("tex","sampler2D"),o.vertex.uniforms.add("viewNormal","mat4"),o.varyings.add("vPositionView","vec3"),T.add(c.glsl(f||(f=r(["\n      void main(void) {\n        vpos = calculateVPos();\n        vpos = subtractOrigin(vpos);\n        ","\n        vpos = addVerticalOffset(vpos, localOrigin);\n        gl_Position = transformPosition(proj, view, vpos);\n        forwardTextureCoordinates();\n      }\n    "],["\n      void main(void) {\n        vpos = calculateVPos();\n        vpos = subtractOrigin(vpos);\n        ","\n        vpos = addVerticalOffset(vpos, localOrigin);\n        gl_Position = transformPosition(proj, view, vpos);\n        forwardTextureCoordinates();\n      }\n    "])),0===e.normalType?c.glsl(x||(x=r(["\n        vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));"],["\n        vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));"]))):"")),o.include(n.Slice,e),o.include(v.DiscardOrAdjustAlpha,e),b.add(c.glsl(V||(V=r(["\n      void main() {\n        discardBySlice(vpos);\n        ","\n\n        ","\n        gl_FragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);\n      }\n    "],["\n      void main() {\n        discardBySlice(vpos);\n        ","\n\n        ","\n        gl_FragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);\n      }\n    "])),e.hasColorTexture?c.glsl(h||(h=r(["\n        vec4 texColor = texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"],["\n        vec4 texColor = texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"]))):"",3===e.normalType?c.glsl(O||(O=r(["\n            vec3 normal = screenDerivativeNormal(vPositionView);"],["\n            vec3 normal = screenDerivativeNormal(vPositionView);"]))):c.glsl(C||(C=r(["\n            vec3 normal = normalize(vNormalWorld);\n            if (gl_FrontFacing == false) normal = -normal;"],["\n            vec3 normal = normalize(vNormalWorld);\n            if (gl_FrontFacing == false) normal = -normal;"])))))),4===e.output&&(o.include(t.Transform,{linearDepth:!1}),o.include(l.TextureCoordinateAttribute,e),o.include(u.VisualVariables,e),e.hasColorTexture&&o.fragment.uniforms.add("tex","sampler2D"),T.add(c.glsl(A||(A=r(["\n      void main(void) {\n        vpos = calculateVPos();\n        vpos = subtractOrigin(vpos);\n        vpos = addVerticalOffset(vpos, localOrigin);\n        gl_Position = transformPosition(proj, view, vpos);\n        forwardTextureCoordinates();\n      }\n    "],["\n      void main(void) {\n        vpos = calculateVPos();\n        vpos = subtractOrigin(vpos);\n        vpos = addVerticalOffset(vpos, localOrigin);\n        gl_Position = transformPosition(proj, view, vpos);\n        forwardTextureCoordinates();\n      }\n    "])))),o.include(n.Slice,e),o.include(v.DiscardOrAdjustAlpha,e),o.include(d.OutputHighlight),b.add(c.glsl(P||(P=r(["\n      void main() {\n        discardBySlice(vpos);\n        ","\n        outputHighlight();\n      }\n    "],["\n      void main() {\n        discardBySlice(vpos);\n        ","\n        outputHighlight();\n      }\n    "])),e.hasColorTexture?c.glsl(D||(D=r(["\n        vec4 texColor = texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"],["\n        vec4 texColor = texture2D(tex, vuv0);\n        discardOrAdjustAlpha(texColor);"]))):"")))}}));