// COPYRIGHT Â© 2020 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.15/esri/copyright.txt for details.

define(["require","exports","../../../../core/tsSupport/makeTemplateObjectHelper","../../../../core/mathUtils","../core/shaderLibrary/Laserline.glsl","../core/shaderLibrary/ScreenSpacePass","../core/shaderModules/interfaces","../core/shaderModules/ShaderBuilder"],(function(e,n,t,i,a,l,o,s){var r,c,d,h,f,p,g,m,P,x,D,u,v,b;Object.defineProperty(n,"__esModule",{value:!0}),n.defaultAngleCutoff=i.deg2rad(6),n.build=function(e){var n=new s.ShaderBuilder;return n.extensions.add("GL_OES_standard_derivatives"),n.include(l.ScreenSpacePass),n.include(a.Laserline,e),n.fragment.uniforms.add("angleCutoff","vec2"),n.fragment.uniforms.add("globalAlpha","float"),e.heightPlaneEnabled&&n.fragment.uniforms.add("heightPlane","vec4"),e.heightPlaneHeightEnabled&&(n.fragment.uniforms.add("heightPlaneHeight","float"),n.fragment.uniforms.add("heightPlaneFillColor","vec4")),e.pointDistanceEnabled&&n.fragment.uniforms.add("pointDistanceSphere","vec4"),e.lineVerticalPlaneEnabled&&n.fragment.uniforms.add("lineVerticalPlane","vec4").add("lineVerticalStart","vec3").add("lineVerticalEnd","vec3"),(e.heightPlaneEnabled||e.pointDistanceEnabled||e.lineVerticalPlaneEnabled)&&n.fragment.uniforms.add("maxPixelDistance","float"),e.intersectsLineEnabled&&n.fragment.uniforms.add("intersectsLineStart","vec3").add("intersectsLineEnd","vec3").add("intersectsLineDirection","vec3").add("intersectsLineRadius","float").add("perScreenPixelRatio","float"),(e.heightPlaneEnabled||e.lineVerticalPlaneEnabled)&&(e.heightPlaneHeightEnabled&&!e.lineVerticalPlaneEnabled||n.fragment.code.add(o.glsl(r||(r=t(["\n      float planeDistancePixels(vec4 plane, vec3 pos) {\n        float dist = dot(plane.xyz, pos) + plane.w;\n        float width = fwidth(dist);\n        dist /= min(width, maxPixelDistance);\n        return abs(dist);\n      }"],["\n      float planeDistancePixels(vec4 plane, vec3 pos) {\n        float dist = dot(plane.xyz, pos) + plane.w;\n        float width = fwidth(dist);\n        dist /= min(width, maxPixelDistance);\n        return abs(dist);\n      }"])))),e.heightPlaneHeightEnabled&&n.fragment.code.add(o.glsl(c||(c=t(["\n      vec2 boxDistancePixels(vec4 plane, float height, vec3 pos) {\n        float d = dot(plane.xyz, pos);\n\n        float offsetMin = plane.w;\n        float offsetMax = offsetMin - height;\n\n        float dmin = d + offsetMin;\n        float dmax = d + offsetMax;\n\n        float width = fwidth(d);\n\n        float outerDistance = min(abs(dmin), abs(dmax));\n        float innerDistance = max(-dmin, dmax);\n\n        return vec2(innerDistance, outerDistance) / min(width, maxPixelDistance);\n      }"],["\n      vec2 boxDistancePixels(vec4 plane, float height, vec3 pos) {\n        float d = dot(plane.xyz, pos);\n\n        float offsetMin = plane.w;\n        float offsetMax = offsetMin - height;\n\n        float dmin = d + offsetMin;\n        float dmax = d + offsetMax;\n\n        float width = fwidth(d);\n\n        float outerDistance = min(abs(dmin), abs(dmax));\n        float innerDistance = max(-dmin, dmax);\n\n        return vec2(innerDistance, outerDistance) / min(width, maxPixelDistance);\n      }"]))))),e.pointDistanceEnabled&&n.fragment.code.add(o.glsl(d||(d=t(["\n    float sphereDistancePixels(vec4 sphere, vec3 pos) {\n      float dist = distance(sphere.xyz, pos) - sphere.w;\n      float width = fwidth(dist);\n      dist /= min(width, maxPixelDistance);\n      return abs(dist);\n    }\n    "],["\n    float sphereDistancePixels(vec4 sphere, vec3 pos) {\n      float dist = distance(sphere.xyz, pos) - sphere.w;\n      float width = fwidth(dist);\n      dist /= min(width, maxPixelDistance);\n      return abs(dist);\n    }\n    "])))),e.intersectsLineEnabled&&n.fragment.code.add(o.glsl(h||(h=t(["\n    float lineDistancePixels(vec3 start, vec3 dir, float radius, vec3 pos) {\n      float dist = length(cross(dir, pos - start)) / (length(pos) * perScreenPixelRatio);\n      return abs(dist) - radius;\n    }\n    "],["\n    float lineDistancePixels(vec3 start, vec3 dir, float radius, vec3 pos) {\n      float dist = length(cross(dir, pos - start)) / (length(pos) * perScreenPixelRatio);\n      return abs(dist) - radius;\n    }\n    "])))),(e.lineVerticalPlaneEnabled||e.intersectsLineEnabled)&&n.fragment.code.add(o.glsl(f||(f=t(["\n    bool pointIsWithinLine(vec3 pos, vec3 start, vec3 end) {\n      vec3 dir = end - start;\n      float t2 = dot(dir, pos - start);\n      float l2 = dot(dir, dir);\n      return t2 >= 0.0 && t2 <= l2;\n    }\n    "],["\n    bool pointIsWithinLine(vec3 pos, vec3 start, vec3 end) {\n      vec3 dir = end - start;\n      float t2 = dot(dir, pos - start);\n      float l2 = dot(dir, dir);\n      return t2 >= 0.0 && t2 <= l2;\n    }\n    "])))),n.fragment.code.add(o.glsl(p||(p=t(["\n  void main() {\n    vec3 pos;\n    vec3 normal;\n    float depthDiscontinuityAlpha;\n\n    if (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {\n      discard;\n    }\n\n    vec4 color = vec4(0, 0, 0, 0);\n  "],["\n  void main() {\n    vec3 pos;\n    vec3 normal;\n    float depthDiscontinuityAlpha;\n\n    if (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {\n      discard;\n    }\n\n    vec4 color = vec4(0, 0, 0, 0);\n  "])))),e.heightPlaneEnabled&&(n.fragment.code.add(o.glsl(g||(g=t(["\n    {\n      float heightPlaneAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, heightPlane.xyz)));\n    "],["\n    {\n      float heightPlaneAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, heightPlane.xyz)));\n    "])))),e.heightPlaneHeightEnabled?n.fragment.code.add(o.glsl(m||(m=t(["\n      vec2 heightBoxDistance = boxDistancePixels(heightPlane, heightPlaneHeight, pos);\n      vec4 heightPlaneFill = premultipliedColor(heightPlaneFillColor.rgb, heightPlaneFillColor.a) * clamp(0.5 - heightBoxDistance.x, 0.0, 1.0);\n      vec4 heightPlaneLine = laserlineProfile(heightBoxDistance.y);\n\n      vec4 heightPlaneColor = blendPremultiplied(heightPlaneFill, heightPlaneLine);\n      "],["\n      vec2 heightBoxDistance = boxDistancePixels(heightPlane, heightPlaneHeight, pos);\n      vec4 heightPlaneFill = premultipliedColor(heightPlaneFillColor.rgb, heightPlaneFillColor.a) * clamp(0.5 - heightBoxDistance.x, 0.0, 1.0);\n      vec4 heightPlaneLine = laserlineProfile(heightBoxDistance.y);\n\n      vec4 heightPlaneColor = blendPremultiplied(heightPlaneFill, heightPlaneLine);\n      "])))):n.fragment.code.add(o.glsl(P||(P=t(["\n      vec4 heightPlaneColor = laserlineProfile(planeDistancePixels(heightPlane, pos));\n      "],["\n      vec4 heightPlaneColor = laserlineProfile(planeDistancePixels(heightPlane, pos));\n      "])))),n.fragment.code.add(o.glsl(x||(x=t(["\n      color = max(color, heightPlaneColor * heightPlaneAlpha);\n    }\n    "],["\n      color = max(color, heightPlaneColor * heightPlaneAlpha);\n    }\n    "]))))),e.pointDistanceEnabled&&n.fragment.code.add(o.glsl(D||(D=t(["\n    {\n      // distance to sphere\n      float pointDistanceSphereDistance = sphereDistancePixels(pointDistanceSphere, pos);\n      vec4 pointDistanceSphereColor = laserlineProfile(pointDistanceSphereDistance);\n      float pointDistanceSphereAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, normalize(pos - pointDistanceSphere.xyz))));\n\n      color = max(color, pointDistanceSphereColor * pointDistanceSphereAlpha);\n    }\n    "],["\n    {\n      // distance to sphere\n      float pointDistanceSphereDistance = sphereDistancePixels(pointDistanceSphere, pos);\n      vec4 pointDistanceSphereColor = laserlineProfile(pointDistanceSphereDistance);\n      float pointDistanceSphereAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, normalize(pos - pointDistanceSphere.xyz))));\n\n      color = max(color, pointDistanceSphereColor * pointDistanceSphereAlpha);\n    }\n    "])))),e.lineVerticalPlaneEnabled&&n.fragment.code.add(o.glsl(u||(u=t(["\n    {\n      if (pointIsWithinLine(pos, lineVerticalStart, lineVerticalEnd)) {\n        float lineVerticalDistance = planeDistancePixels(lineVerticalPlane, pos);\n\n        vec4 lineVerticalColor = laserlineProfile(lineVerticalDistance);\n        float lineVerticalAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, lineVerticalPlane.xyz)));\n\n        color = max(color, lineVerticalColor * lineVerticalAlpha);\n      }\n    }\n    "],["\n    {\n      if (pointIsWithinLine(pos, lineVerticalStart, lineVerticalEnd)) {\n        float lineVerticalDistance = planeDistancePixels(lineVerticalPlane, pos);\n\n        vec4 lineVerticalColor = laserlineProfile(lineVerticalDistance);\n        float lineVerticalAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, lineVerticalPlane.xyz)));\n\n        color = max(color, lineVerticalColor * lineVerticalAlpha);\n      }\n    }\n    "])))),e.intersectsLineEnabled&&n.fragment.code.add(o.glsl(v||(v=t(["\n    {\n      if (pointIsWithinLine(pos, intersectsLineStart, intersectsLineEnd)) {\n        float intersectsLineDistance = lineDistancePixels(intersectsLineStart, intersectsLineDirection, intersectsLineRadius, pos);\n        vec4 intersectsLineColor = laserlineProfile(intersectsLineDistance);\n        float intersectsLineAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, 1.0 - abs(dot(normal, intersectsLineDirection)));\n\n        color = max(color, intersectsLineColor * intersectsLineAlpha);\n      }\n    }\n    "],["\n    {\n      if (pointIsWithinLine(pos, intersectsLineStart, intersectsLineEnd)) {\n        float intersectsLineDistance = lineDistancePixels(intersectsLineStart, intersectsLineDirection, intersectsLineRadius, pos);\n        vec4 intersectsLineColor = laserlineProfile(intersectsLineDistance);\n        float intersectsLineAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, 1.0 - abs(dot(normal, intersectsLineDirection)));\n\n        color = max(color, intersectsLineColor * intersectsLineAlpha);\n      }\n    }\n    "])))),n.fragment.code.add(o.glsl(b||(b=t(["\n    gl_FragColor = laserlineOutput(color * depthDiscontinuityAlpha);\n  }\n  "],["\n    gl_FragColor = laserlineOutput(color * depthDiscontinuityAlpha);\n  }\n  "])))),n}}));